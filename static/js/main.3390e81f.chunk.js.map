{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","getUserById","userId","usersFromServer","find","biggestTodoId","ids","Math","max","createNewToDo","inputTitle","selectedUser","App","useState","actualTodos","setActualTodos","setInputTitle","setSelectedUser","titleIsEmpty","setTitleIsEmpty","userIsEmpty","setUserIsEmpty","action","method","onSubmit","event","preventDefault","trim","length","tasks","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3390e81f.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames('TodoInfo',\n      {\n        'TodoInfo--completed': todo.completed,\n      })}\n  >\n\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n    {todo.user && (<UserInfo user={todo.user} />)}\n\n  </article>\n);\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Prop = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Prop> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import './App.scss';\nimport { FormEvent, useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList/TodoList';\n\nfunction getUserById(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nconst biggestTodoId = () => {\n  const ids = todos.map(todo => {\n    return todo.id;\n  });\n\n  return Math.max(...ids);\n};\n\nconst createNewToDo = (inputTitle: string, selectedUser: string): Todo => {\n  return {\n    id: biggestTodoId() + 1,\n    title: inputTitle,\n    completed: false,\n    userId: +selectedUser,\n    user: getUserById(+selectedUser),\n  };\n};\n\nexport const App = () => {\n  const [actualTodos, setActualTodos] = useState(todos);\n  const [inputTitle, setInputTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState('');\n  const [titleIsEmpty, setTitleIsEmpty] = useState(false);\n  const [userIsEmpty, setUserIsEmpty] = useState(false);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    if (inputTitle.trim() === '') {\n      setTitleIsEmpty(true);\n    }\n\n    if (!selectedUser) {\n      setUserIsEmpty(true);\n    }\n\n    if (inputTitle.length <= 0 || !selectedUser) {\n      return;\n    }\n\n    if (!titleIsEmpty && !userIsEmpty) {\n      setActualTodos((tasks) => {\n        return [...tasks, createNewToDo(inputTitle, selectedUser)];\n      });\n    }\n\n    setInputTitle('');\n    setSelectedUser('');\n    setTitleIsEmpty(false);\n    setUserIsEmpty(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={inputTitle}\n            onChange={event => {\n              setInputTitle(event.target.value);\n              if (titleIsEmpty) {\n                setTitleIsEmpty(false);\n              }\n            }}\n          />\n\n          {titleIsEmpty\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            onChange={(event) => {\n              setSelectedUser(event.target.value);\n              if (userIsEmpty) {\n                setUserIsEmpty(false);\n              }\n            }}\n            data-cy=\"userSelect\"\n            value={selectedUser}\n          >\n            <option value=\"\" disabled>Choose a user</option>\n\n            {usersFromServer.map((user) => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {userIsEmpty\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={actualTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}